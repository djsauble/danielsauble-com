<section>
  <div class="container">
    <div class="ten columns">
      <h1>UX. Design. IxD.</h1>
      <img class="face" src="images/daniel.jpg" alt="my face"/>
      <p>My name is <strong>Daniel Sauble</strong>. I’m a UX designer, <a href="http://bigdesignevents.com/conference/bigd2014/speakers/?subject=lineup&_year=2014&artist=510" target="_bigdesign">speaker</a>, <a href="https://medium.com/@djsauble" target="_medium">writer</a>, and one-time runner of <a href="http://haggmud.com" target="_ultras">ultra-marathons</a>. You can reach me via <a href="https://twitter.com/djsauble" target="_twitter">Twitter</a>, <a href="https://www.linkedin.com/in/djsauble" target="_linkedin">LinkedIn</a>, <a href="http://about.me/djsauble">About.me</a>, <a href="https://plus.google.com/+DanielSauble0">Google+</a>, or plain old <a href="mailto:djsauble@gmail.com" target="_mail">Email</a>.</p>
      <p>If you made it past the hyperlinks, welcome. If you’re curious to learn more about my work, you’re at the right place.</p>
      <h2>First, a bit of context&hellip;</h2>
      <p>Most of my design work has been for <a href="https://puppetlabs.com/puppet/puppet-enterprise">Puppet Enterprise</a>, a configuration management tool. What is config management?</p>
      <p>Imagine you’re a sysadmin. Your daily responsibilities revolve around the care and feeding of hundreds (or thousands) of servers. In a sense, it’s a lot like herding cats. They’re all unique, and have different needs (and quirks). It’s&mdash;in a word&mdash;time-consuming.</p>
      <p>Configuration management changes the game.</p>
      <p>With Puppet (or another configuration management solution), you solve your configuration problems once, in code. Puppet does the tedious work of keeping your servers in line.</p>
      <p>Our users love Puppet.</p>
      <p>Unfortunately, the product was built without proper UX design. That’s where I’ve spent most of the past three years, introducing consideration for our users into the products we build.</p>
      <a name="toc"></a>
      <h2>What’s in the portfolio?</h2>
      <ul class="toc">
        <li>
          <a href="#first" class="pointer first">
            Integrating an aquisition (MCollective) with our existing product offerings.
          </a>
        </li>
        <li>
          <a href="#second" class="pointer second">
            Solving the problem of patching many machines across multiple platforms.
          </a>
        </li>
        <li>
          <a href="#third" class="pointer third">
            Building a pattern library to support design consistency and speed of implementation.
          </a>
        </li>
      </ul>
    </div>
  </div>
</section>
<section class="first">
  <a name="first"></a>
  <div class="container">
    <div class="ten columns">
      <a href="#toc" class="back"><i class="fa">&#xf0aa;</i></a>
      <h2>Integrating MCollective</h2>
      <p>I started at Puppet in 2011, shortly after we acquired a tool called MCollective.</p>
      <p>MCollective solves the problem of “how do I push arbitrary commands to an arbitrary set of servers?” through a messaging bus and varying degrees of technological wizardry.</p>
      <p>We wanted to take this acquisition and integrate it with Puppet Enterprise 2.0, the first real version of our enterprise offering (Puppet Enterprise 1.0 was merely a rebrand of our open source dashboard).</p>
      <p>There were four main features planned for the release. However, the MCollective integration was most at-risk for falling off, due to a lack of front-end developers.</p>
      <p>So my boss asked me, the brand-new intern, to tackle the problem.</p>
      <p>I owned the front-end pieces of this work, including code. In three months, we went from workflows to wireframes to shipped product. It was my first real project as a UX designer/developer.</p>
      <p>Unfortunately, we didn’t properly vet it with users. It turned out to be too compartmentalized from the rest of Puppet Enterprise to be much good. And it didn’t scale.</p>
      <p>(Two years later, I engaged in a research project to figure out how to contextualize it. We’re in the midst of prioritizing the backlog which resulted.)</p>
      <p>Each year, Puppet Labs puts on a conference in San Francisco. A few months after PE 2.0 shipped, I suggested we run user testing at the conference.</p>
      <p>My boss liked the idea, and put me, his newest employee, in charge of execution. We prepared a set of tests, recruited volunteers, and ran 50 user tests at the conference.</p>
      <p>In general, the experience went well. We built empathy with our user base, helped our fellow Puppet employees understand what UX does, and kicked the wheels on some user testing process (at scale).</p>
      <p>The next year, we repeated the experiment and nearly doubled the number of user tests (to 95), while doing a better job of coming away with real action items for the product.</p>
      <p>I’ve given three talks about this experience: WebVisions (PDX), Open Source Bridge (PDX), and Big Design (Texas).</p>
    </div>
  </div>
</section>
<section class="second">
  <a name="second"></a>
  <div class="container">
    <div class="ten columns">
      <a href="#toc" class="back"><i class="fa">&#xf0aa;</i></a>
      <h2>Many-to-many patching</h2>
      <p>In 2012, I was made lead designer on a new product. Puppet Patch Manager.</p>
      <p>Patches–or software updates–are important to sysadmins. The wrong software version can leave you open to security attacks. You want to know the version of software across your infrastructure, and have the ability to update it if necessary.</p>
      <p>The problem is, every operating system manages software updates differently. If you manage a dozen operating systems, this is a difficult problem indeed.</p>
      <p>Fortunately, Puppet has a couple of tricks up its sleeve.</p>
      <p>It’s cross-platform, so it runs on everything. It can tell you about the patches on all your servers, and manage them. My job was to figure out how to visualize this in a web GUI.</p>
      <p>The tricky part was, I had no idea what kind of data I’d be dealing with.</p>
      <p>We needed to get the tool installed on customer infrastructures. Then observe them using it.</p>
      <p>We decided to build a read-only tool for this purpose. A research release.</p>
      <p>I sallied forth with user stories, story maps, workflows, and wireframes. The result was a one-page app which let you dig into your patches.</p>
      <p>First, it gave a list of the software installed on all your systems. Select a package to view all the installed versions of that package. Select a version to view all nodes with that version installed.</p>
      <p>Pretty simple, but it worked well.</p>
      <p>Unfortunately, we decided to scrap the project. Turns out, people liked it, but wouldn’t pay enough to make it worth our while.</p>
      <p>I’m proud that we decided to fail early instead of pushing ahead and releasing something without market fit.</p>
    </div>
  </div>
</section>
<section class="third">
  <a name="third"></a>
  <div class="container">
    <div class="ten columns">
      <a href="#toc" class="back"><i class="fa">&#xf0aa;</i></a>
      <h2>Building a pattern library</h2>
      <p>In 2013, my main project was to build a library of UI patterns, which we could use in design and provide as a reference for engineering.</p>
      <p>We started with a bespoke website that our team rolled ourselves. It was hosted on Github and Heroku, and you had to know YAML and Markdown to contribute. This meant only the more technical members of the UX team could contribute.</p>
      <p>I decided to port the library to our company’s wiki, powered by Atlassian Confluence. We missed the flexibility of having a fully-customized website (read: a more beautiful website), but this was more than offset by the ease of contributing to a wiki-based platform (read: point-and-click in a GUI).</p>
      <p>Once we settled on a good platform, I shifted to building more patterns. By the end of the year, we’d compiled 71 IxD patterns in various levels of fidelity (most written by me).</p>
      <p>In the course of writing patterns, I realized that the taxonomy needed revision. I took the list of patterns, created a card sort exercise, then asked different members of my team to sort them into several buckets.</p>
      <p>The result was a lovely six category taxonomy, with a refreshingly even distribution across the board.</p>
      <ul>
        <li>Actions</li>
        <li>Containers</li>
        <li>Content and Format</li>
        <li>Navigation</li>
        <li>Notification</li>
        <li>Meta</li>
      </ul>
      <p>One mark of a successful pattern library is that it makes the job of engineers easier. They should be able to reference the library instead of asking “how does X behave?” or “what color is widget Y?”.</p>
      <p>Designers should benefit from a pattern library as well. They can solve tactical problems once, record the solution as a pattern, and share it so other designers can reuse the solution.</p>
      <p>This is where was the pattern library was less than successful. I didn’t succeed in getting my team to contribute to or reuse patterns from the library. I think this was because we didn’t integrate the pattern library into our wireframing tools (Axure, Balsamiq, Sketch).</p>
      <p>In addition, the pattern library didn’t help engineering save time implementing our designs. I think this was due to not mocking the patterns in live code.</p>
    </div>
  </div>
</section>
