<div class="container">
  <div class="ten columns">
    <h1>Hello</h1>

    <p>My name is Daniel Sauble. I design automation software for
    sysadmins.</p>

    <h2>Designing for sysadmins</h2>

    <p>Sysadmins are the busiest people I know. They  work long hours, just to
    keep the lights on. They use expensive (and often ineffective) enterprise
    tools, mandated from the top down. They want to solve the problems that
    feed their fires,  but are simply too busy.</p>

    <p>This is a shame. People are really good at solving problems. When a
    sysadmin spends all her time firefighting, it is a waste of her time and
    talents.</p>

    <p>And this is why automation exists. Once a problem has been solved, a
    human should never have to solve it again.</p>

    <p>At Puppet Labs, I help design software that manages the configuration of
    servers. A sysadmin defines his infrastructure in code, and Puppet makes it
    so (and keeps it so). He can move on to other problems.</p>

    <h2>What is my design process?</h2>

    <p><strong>Problems first.</strong> Before I think about solutions, I want
    to understand the problem. I want to understand the motivation and goals of
    the people with that problem.  I write a few hypotheses and conduct
    interviews around those. Personas and scenarios are my weapon of choice
    here.</p>

    <p><strong>User stories next.</strong> Who is the target audience, what are
    they trying to do, and why? These should come out of the scenarios. Find
    similarities and group them into a story map. Summarize the map–take each
    user story and boil it down to a short phrase.</p>

    <p><strong>Mental models.</strong> It’s easy to jump to a GUI with features
    X, Y, and Z. Instead, take each column in your story map and build a mental
    model from that. Keep it very abstract and scoped to the epics in your
    story map. Usually, mine resembles a small flowchart with text and
    arrows.</p>

    <p><strong>Workflows.</strong> Now we search the crannies of our story map,
    and build a web that connects all the user stories together. This is a
    comprehensive version of my mental model. It captures 100% of the story
    map. I split the workflow into actions and views. OODA is a good model
    here. A workflow is a powerful scoping tool.</p>

    <p><strong>Wireframes.</strong> Up to now, I have validated every step of
    the process with users. That’s good, because wireframes can take
    substantial time to develop, and I don’t want to spend that time sketching
    the wrong thing. Even when I’m confident about the direction of the
    project, I keep these wireframes low fidelity.</p>

    <p><strong>Prototypes.</strong> For projects involving a high level of
    interactivity, I cannot always get my point across with a set of static
    wireframes. Using Axure (or a good programming framework), I make the
    wireframes look real, with the most complicated interactions mocked
    realistically. In addition, I write a document that describes 100% of the
    interactions (including those not prototyped) in text, with comic
    illustrations.</p>

    <h2>Building the thing</h2>

    <p>My strengths are technical. I love code. In an ideal world, I would
    never leave the command line except to sketch ideas and workflows on
    paper.</p>

    <p>However, as a user experience designer, I have limitations. I can use
    high-fidelity tools like Photoshop and Axure to get a point across, but I’m
    not a visual designer. I can hack Javascript and tweak the look and feel of
    a website, but I’m not a developer.</p>

    <p>Without collaborators in these key roles, I’m incapable of shipping
    anything. The only way to ship something I’m proud of is to work closely
    with other people.</p>

    <p><strong>Product owners</strong> are the expert on user needs. They are
    responsible for determining the set of features to make a release viable.
    They should be consulted early and often to make sure you’re not designing
    the wrong thing.</p>

    <p><strong>Software engineers</strong> have the technical know-how to
    implement a design. I want them involved early in the design process,
    because they can spot things that will be difficult (or impossible) to
    build. This is vital information, since it helps us prioritize our design
    work and decide which things to ship now versus in the next version.</p>

    <p><strong>QA engineers</strong> verify whether the design as specced works
    as implemented. They are wonderful at identifying edge cases and
    inconsistencies. As with software engineering, I want these people involved
    in my design process as early as possible.</p>

    <p><strong>Technical writers</strong> are responsible for communicating with
    your target audience. They write the documentation, copy, and marketing
    brief for the release. They can spot problems with the mental model I use
    for my design, so I want them involved as early as possible (spotting a
    trend?). I18N and L10N are areas of concern for them as well.</p>

    <h2>Reaching out</h2>

    <p>And that’s my design process. The rest is communication.</p>

    <p>Did any of this resonate with you? Send me an <a href="mailto:djsauble@gmail.com">email</a>.</p>

  </div>
</div>
